# import redis
# # теперь нужно открыть соединение с Redis
# with redis.Redis() as redis_client:
#     value = redis_client.brpop("queue")

# print(int(value[1]))


#-------------------------------------------------

import redis
# теперь нужно открыть соединение с Redis
redis_server = redis.Redis() #отклыри соединение с сервером

redis_server.close()#закрыли соединение с сервером
#после соединения с сервером произошла какая-то работа и соединние закрыли. Но такая конструкция не очень хорошая, потому что
#внутри работы может быть быть какая-нибудь ошибка и она не исправится. Соответсвенно задача работа не завершится и соединение не закр.
#решение этой проблемы ниже
with redis.Redis() as redis_client: # with открывает соединение с сервером и всё, что находится внутри этой команды(с отступом) будет 
                                    # будет выполняться. А когда следующая команда будет уже без отступа, то оператор with закрывается
                                    # то есть закрывается соединение с сервером. Это позволит избежать того, что соединение может не
                                    # закрыться, если мы внутри with словим ошибку
                                    # redis.Redis() - открыввет соединения и кладёт в переменную redis_client
    value = redis_client.brpop("queue")# в переменную value принимаем значение, которое извлекаем из БД. Указываем очередь от куда я беру queue
                                    #есть 2 команды, которые вытягивют из redis_client данные: brpop и rpop. rpop, если очередь пуста, 
                                    # будет выдавать NULL. Это не хорошо, а brpop будет в таком случае ожидать пока в очередь не попадёт
                                    # задача и сразу же её вытащит и передаст переменно  value.

print(int(value[1]))